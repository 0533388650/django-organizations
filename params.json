{"name":"django-organizations","body":"Add user-managed, multi-user groups to your Django project. Use\r\ndjango-organizations whether your site needs organizations that function like\r\nsocial groups or multi-user account objects to provide account and subscription\r\nfunctionality beyond the individual user.\r\n\r\n* Relies on `django.contrib.auth` and does not add or require additional user\r\n  or authentication functionality\r\n* Users can be belong to and own more than one organization (account, group)\r\n* Invitation and registration functionality is designed to be flexible to allow\r\n  you to integrate existing invitation and registration apps\r\n\r\n## Installing\r\n\r\nFirst add the application to your Python path. The easiest way is to use\r\n`pip`:\r\n\r\n```\r\n$ pip install django-organizations\r\n```\r\n\r\nYou should install by downloading the source and running::\r\n\r\n```\r\npython setup.py install\r\n```\r\n\r\n### Configuration\r\n\r\nMake sure you have `django.contrib.auth` installed, and add the `organizations`\r\napplication to your `INSTALLED_APPS` list:\r\n\r\n```\r\nINSTALLED_APPS = (\r\n    ...\r\n    'django.contrib.auth',\r\n    'organizations',\r\n)\r\n```\r\n\r\nThen ensure that your project URL conf is updated. You should hook in the\r\nmain application URL conf as well as your chosen invitation backend URLs:\r\n\r\n```\r\nfrom organizations.backends import invitation_backend\r\n\r\nurlpatterns = patterns('',\r\n    ...\r\n    url(r'^accounts/', include('organizations.urls')),\r\n    url(r'^invitations/', include(invitation_backend().get_urls())),\r\n)\r\n```\r\n\r\nYou can specify a different invitation backend in your project settings, and\r\nthe `invitation_backend` function will provide the URLs defined by that\r\nbackend:\r\n\r\n```\r\nORGS_INVITATION_BACKEND = 'myapp.backends.MyInvitationBackend'\r\n```\r\n\r\n## Usage Overview\r\n\r\nFor most use cases it should be sufficient to include the app views directly\r\nusing the default URL conf file. You can customize their functionality or\r\naccess controls by extending the base views.\r\n\r\nThere are three models:\r\n\r\n* **Organization** The group object. This is what you would associate your own\r\n  app's functionality with, e.g. subscriptions, repositories, projects, etc.\r\n* **OrganizationUser** A custom `through` model for the ManyToMany relationship\r\n  between the `Organization` model and the `User` model. It stores additional\r\n  information about the user specific to the organization and provides a\r\n  convenient link for organization ownership.\r\n* **OrganizationOwner** The user with rights over the life and death of the\r\n  organization. This is a one to one relationship with the `OrganizationUser`\r\n  model. This allows `User` objects to own multiple organizations and makes it\r\n  easy to enforce ownership from within the organization's membership.\r\n\r\nThe underlying organizations API is simple:\r\n\r\n```\r\n>>> chris = User.objects.get(username=\"chris\")\r\n>>> soundgarden = create_organization(chris, \"Soundgarden\")\r\n>>> soundgarden.is_user(chris)\r\nTrue\r\n>>> soundgarden.is_admin(chris)\r\nTrue\r\n>>> soundgarden.owner.organization_user\r\n<OrganizationUser: Chris Cornell>\r\n>>> soundgarden.owner.organization_user.user\r\n>>> <User: chris>\r\n>>> audioslave = create_organization(chris, \"Audioslave\")\r\n>>> tom = User.objects.get(username=\"tom\")\r\n>>> audioslave.add_user(tom, is_admin=True)\r\n<OrganizationUser: Tom Morello>\r\n```\r\n\r\n## Overview\r\n\r\nEach organization can have only one owner, however a site user can be a member\r\nof multiple organizations, or own multiple organizations. The OrganizationUser\r\nmodel servers as an intermediary between the `Organization` and the `Users` to\r\nallow this.\r\n\r\n## Development & Contributing\r\n\r\nDevelopment is on-going. To-do items have been moved to the wiki for the time\r\nbeing.\r\n\r\nThe basic functionality should not need much extending. Current dev priorities\r\nfor me and contributors should include:\r\n\r\n* Improving the tests and test coverage (ideally moving them back out of the\r\n  main module and executable using the setup.py file)\r\n* Improving the backends and backends concept so that additional invitation and\r\n  registration backends can be used\r\n* Documentation\r\n* Ensuring all application text is translatable\r\n\r\nPlease use the project's issues tracker to report bugs. Thanks!\r\n\r\n## Project goals\r\n\r\ndjango-organizations should be backend agnostic:\r\n\r\n1. Authentication agnostic\r\n2. Registration agnostic\r\n3. Invitation agnostic\r\n4. User messaging agnostic\r\n\r\nEtc.\r\n\r\n## License\r\n\r\nAnyone is free to use or modify this software under ther terms of the BSD\r\nlicense.","tagline":"Provides multi-user accounts for Django applications.","google":"UA-3288725-2","note":"Don't delete this file! It's used internally to help with page regeneration."}